# -*- coding: utf-8 -*-
"""CSCI4333_Project_Notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WjUQfxdb8UEXXAuQgAWjX8uVhTQE1v2w

## **Task 1**
"""

import sqlite3
import csv
con = sqlite3.connect('original_db.db')
cur = con.cursor()

table_name ='notown'
csv_file = 'no_town.csv'

with open(csv_file, 'r') as file:
    csv_reader = csv.reader(file)
    header = next(csv_reader)
    columns = ', '.join(header)
    cur.execute(f'CREATE TABLE {table_name} ({columns})')

# Import data from CSV into the table
with open(csv_file, 'r') as file:
    next(file)  # Skip header row
    cur.executemany(f'INSERT INTO {table_name} VALUES ({",".join(["?"] * len(header))})', csv.reader(file))

statement = '''
SELECT * FROM notown;
'''
res = cur.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

con.commit()

"""## **Task 2**"""

con = sqlite3.connect('new_db.db')
cur = con.cursor()

statement = '''
CREATE TABLE Musicians (
     SSN text,
     name text,
     number int,
     street_name text,
     street_type text,
     primary key (SSN)
);
'''

cur.execute(statement)

statement = '''
CREATE TABLE Album (
     album_id text,
     title text,
     copyright_date DATE,
     format text,
     primary key (album_id)
);
'''

cur.execute(statement)

statement = '''
CREATE TABLE Instrument (
     id text,
     instrument_name text,
     musical_key text,
     primary key (id)
);
'''

cur.execute(statement)

statement = '''
CREATE TABLE Participate_In(
     SSN text,
     album_id text,
     primary key (SSN, album_id),
     foreign key (SSN) references Musician(SSN),
     foreign key (album_id) references Album(album_id)
);
'''

cur.execute(statement)

statement = '''
CREATE TABLE Used_In(
     album_id text,
     id text,
     primary key (album_id, id),
     foreign key (album_id) references Musician(album_id),
     foreign key (id) references Album(id)
);
'''

cur.execute(statement)

con.commit()

"""## **Task 3**"""

# Connect to the source database
source_conn = sqlite3.connect('original_db.db')
source_cursor = source_conn.cursor()

# Connect to the target database
target_conn = sqlite3.connect('new_db.db')
target_cursor = target_conn.cursor()

source_cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = source_cursor.fetchall()
print(tables)

# Read data from the source table
source_cursor.execute('SELECT * FROM notown')
rows = source_cursor.fetchall()

# Read data from the source table
source_cursor.execute('SELECT DISTINCT SSN, name, num, street, street_type FROM notown')
rows = source_cursor.fetchall()

# Insert data into the target table
for row in rows:
    target_cursor.execute('INSERT INTO Musicians (SSN, name, number, street_name, street_type) VALUES (?, ?, ?, ?, ?)', row)

# Read data from the source table
source_cursor.execute('SELECT DISTINCT instrument_id, instrument_type, key FROM notown')
rows = source_cursor.fetchall()

# Insert data into the target table
for row in rows:
    target_cursor.execute('INSERT INTO Instrument (id, instrument_name, musical_key) VALUES (?, ?, ?)', row)

# Read data from the source table
source_cursor.execute('SELECT DISTINCT album_id, album_name, date, album_type FROM notown')
rows = source_cursor.fetchall()

# Insert data into the target table
for row in rows:
    target_cursor.execute('INSERT INTO Album (album_id, title, copyright_date, format) VALUES (?, ?, ?, ?)', row)

# Read data from the source table
source_cursor.execute('SELECT DISTINCT ssn, album_id FROM notown')
rows = source_cursor.fetchall()

# Insert data into the target table
for row in rows:
    target_cursor.execute('INSERT INTO Participate_In(SSN, album_id) VALUES (?, ?)', row)

# Read data from the source table
source_cursor.execute('SELECT DISTINCT album_id, instrument_id FROM notown')
rows = source_cursor.fetchall()

# Insert data into the target table
for row in rows:
    target_cursor.execute('INSERT INTO Used_In(album_id, id) VALUES (?, ?)', row)

statement = '''
SELECT * FROM notown;
'''
res = source_cursor.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

statement = '''
SELECT * FROM Musicians;
'''
res = target_cursor.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

statement = '''
SELECT * FROM Instrument;
'''
res = target_cursor.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

statement = '''
SELECT * FROM Album;
'''
res = target_cursor.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

statement = '''
SELECT * FROM Participate_In;
'''
res = target_cursor.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

statement = '''
SELECT * FROM Used_In;
'''
res = target_cursor.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

# Commit the changes and close connections
target_conn.commit()
target_conn.close()
source_conn.close()

"""## **Task 4: Summary**"""

con = sqlite3.connect('new_db.db')
cur = con.cursor()

"""1. A total number of musicians and a list of musicians (name and ssn)."""

statement = '''

SELECT COUNT(*) FROM Musicians;

'''
res = cur.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

statement = '''

SELECT name, ssn FROM Musicians;

'''
res = cur.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

"""2. A total number of albums and a list of albums recorded at Notown (name and album id)."""

statement = '''

SELECT COUNT(*) FROM Album;

'''
res = cur.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

statement = '''

SELECT title, album_id FROM Album;

'''
res = cur.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

"""3. A total number of instruments and a list of instruments at Notown (name, key, and id)."""

statement = '''

SELECT COUNT(*) FROM Instrument;

'''
res = cur.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

statement = '''

SELECT instrument_name, musical_key, id FROM Instrument;

'''
res = cur.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

"""4. A table consists of the names of musicians and the total number of albums written by them."""

statement = '''

SELECT name, COUNT(album_id) FROM Participate_In NATURAL JOIN Musicians GROUP BY ssn;

'''
res = cur.execute(statement)

relational_schema = [x[0] for x in res.description]
print(relational_schema)
print('----------------')
for instance in res:
    print(instance)

"""#Close the connection (Do NOT run this if you plan to play with the query)"""

con.commit()
con.close()